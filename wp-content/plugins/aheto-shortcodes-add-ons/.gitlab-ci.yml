image: rosinghal/xg-base:2022-02-17-a

variables:
    SOURCE_PATH: .
    # DEPLOY_PATH: wp-content/plugins/
    GIT_SUBMODULE_STRATEGY: recursive

stages:
    - build
    - gdrive
    # - deploy

# Build part starts here
.build: &build
    stage: build
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - node_modules
            - bower_components
            - vendor
        policy: pull-push
    artifacts:
        paths:
            - ${SOURCE_PATH}/artifacts/*.zip
        expire_in: 1 week
    script:
        # Run any other commands here needed for setup and/or build
        - PACKAGE_NAME=$(node -p -e "require('./package.json').name")
        - PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
        - echo "Creating artifacts/${PACKAGE_NAME}-v${PACKAGE_VERSION}.zip"
        - rm -rf ${SOURCE_PATH}/artifacts
        - mkdir -p ${SOURCE_PATH}/artifacts/${PACKAGE_NAME}
        - cd ${SOURCE_PATH}
        - rsync -av
            --exclude=".*"
            --exclude="*.zip"
            --exclude="*.sh"
            --exclude="*.sql"
            --exclude="*.md"
            --exclude="node_modules"
            --exclude="bower_components"
            --exclude="package-lock.json"
            --exclude="package.json"
            --exclude="yarn.lock"
            --exclude="composer.json"
            --exclude="composer.lock"
            --exclude="webpack.config.js"
            --exclude="phpcs.ruleset.xml"
            --exclude="phpunit.xml.dist"
            --exclude="bower.json"
            --exclude="gulpfile.js"
            --exclude="Gulpfile.js"
            --exclude="Gruntfile.js"
            --exclude="phpcs.xml"
            --exclude="dest"
            --exclude="temp"
            --exclude="build"
            --exclude="archive"
            --exclude="artifacts"
            . artifacts/${PACKAGE_NAME}
        - cd artifacts
        - zip -r ${PACKAGE_NAME}-v${PACKAGE_VERSION}.zip ${PACKAGE_NAME}

build:
    <<: *build
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: always
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: manual
# Build part ends here

# Google Drive upload part starts here
gdrive:
    stage: gdrive
    script:
        - PACKAGE_NAME=$(node -p -e "require('./package.json').name")
        - PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
        - echo ${GDRIVE_TOKEN_CONFIG} > token_v2.json
        - gdrive upload --parent "1CKB0uI8CppkXTbevDG9105tvIwlcwUPl" --config "." ${SOURCE_PATH}/artifacts/${PACKAGE_NAME}-v${PACKAGE_VERSION}.zip
        - echo "Check https://drive.google.com/drive/folders/1CKB0uI8CppkXTbevDG9105tvIwlcwUPl?usp=sharing for uploaded file."
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: always
# Google Drive upload part ends here

# Deploy part starts here
# deploy-staging:
#     stage: deploy
#     script:
#         - echo "Uploading files to staging"
#         - PACKAGE_NAME=$(node -p -e "require('./package.json').name")
#         - sshpass -p "${STAGING_FTP_PASSWORD}" rsync -e "ssh -o StrictHostKeyChecking=no -p ${STAGING_SSH_PORT}" -azvOP ${SOURCE_PATH}/artifacts/${PACKAGE_NAME} ${STAGING_FTP_USERNAME}@${STAGING_FTP_HOST}:${STAGING_FTP_WP_PATH}/${DEPLOY_PATH} --no-perms
#     environment:
#         name: staging
#     rules:
#         - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#           when: always
#         - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
#           when: manual

# deploy-production:
#     stage: deploy
#     script:
#         - echo "Uploading files to production"
#         - PACKAGE_NAME=$(node -p -e "require('./package.json').name")
#         - sshpass -p "${PRODUCTION_FTP_PASSWORD}" rsync -e "ssh -o StrictHostKeyChecking=no -p ${PRODUCTION_SSH_PORT}" -azvOP ${SOURCE_PATH}/artifacts/${PACKAGE_NAME} ${PRODUCTION_FTP_USERNAME}@${PRODUCTION_FTP_HOST}:${PRODUCTION_FTP_WP_PATH}/${DEPLOY_PATH} --no-perms
#     environment:
#         name: production
#     rules:
#         - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#           when: always
# Deploy part ends here
